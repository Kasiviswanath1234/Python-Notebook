Installing Docker on Amazon Linux 2:
------------------------------------

Login into remote AWS server using the ssh command: 
--------------------------------------------------
ssh ec2-user@ec2-ip-address-dns-name-here



Apply pending updates using the yum command:
-------------------------------------------
sudo yum update



Search for Docker package:
--------------------------
sudo yum search docker




Get version information:
-----------------------
sudo yum info docker




Install docker, run:
---------------------
sudo yum install docker





Add group membership for the default ec2-user so you can run all docker commands without using the sudo command:
----------------------------------------------------------------------------------------------------------------

sudo usermod -a -G docker ec2-user

id ec2-user

# Reload a Linux user's group assignments to docker w/o logout

newgrp docker






Need docker-compose too? Try any one of the following command:
--------------------------------------------------------------

# 1. Get pip3 
sudo yum install python3-pip


# 2. Then run any one of the following
sudo pip3 install docker-compose # with root access

# OR #
 
pip3 install --user docker-compose # without root access for security reasons




Enable docker service at AMI boot time:
---------------------------------------
sudo systemctl enable docker.service




Start the Docker service:
-------------------------
sudo systemctl start docker.service




Finding status:
----------------
Get the docker service status on your AMI instance, run:
--------------------------------------------------------

sudo systemctl status docker.service



Getting docker version info on Amazon Linux:
---------------------------------------------

The docker-compose is installed in ‘/usr/local/bin’ directory and it may not be on your PATH settings. To see current PATH settings run the echo command/printf command:
--------------------------------------------------------------------------------------------------------------

echo "$PATH"


To add /usr/local/bin/ path to your bash startup file such as ~/.profile or ~/.bash_profile using the export command:
------------------------------------------------------------------------------------------------------------
export PATH=$PATH:/usr/local/bin


Another option for developers is to use the find command to locate the docker-compose file as follows:
------------------------------------------------------------------------------------------------------

sudo find / -name "docker-compose" -ls




See docker version:
------------------

docker version


Also verify that docker-compose install was a success on AMI 2 by running the following command:
------------------------------------------------------------------------------------------------

docker-compose version



How to control docker service:
---------------------------------

Use the systemctl command as follows:
--------------------------------------


sudo systemctl start docker.service #<-- start the service
sudo systemctl stop docker.service #<-- stop the service
sudo systemctl restart docker.service #<-- restart the service
sudo systemctl status docker.service #<-- get the service status


Creating your first Docker project:
-----------------------------------

mkdir static-website-1

cd static-website-1



Use the echo command as follows to create a new index.html for our project:
---------------------------------------------------------------------------

echo 'Docker Apache static site by nixCraft' > index.html



Make a new Dockerfile using a text editor such as nano command or vi command:
-----------------------------------------------------------------------------

vi Dockerfile



Append the following config for your Amazon Linux container:
-------------------------------------------------------------

FROM rockylinux/rockylinux:latest
 
MAINTAINER nixCraft
LABEL Remarks="RockyLinux test image for installing static webpage with Apache2"
 
# Install apache2 with less
RUN yum -y update && \
yum -y install httpd && \
yum clean all
 
# Sample index.html for test 
COPY index.html /var/www/html/index.html
 
# Port and set entry point for container 
EXPOSE 80
ENTRYPOINT /usr/sbin/httpd -DFOREGROUND




Build it:
---------

sudo docker build -t staticsite01 .


List images:
-------------

sudo docker images


Run it:
--------
sudo docker run -d -p 80:80 --name staticsite01 staticsite01

sudo docker ps

sudo docker port staticsite01

curl 127.0.0.1:80


------------------------------------------------------------------------------------------------------------------------------------------------------------



Options:
--------
      --config string      Location of client config files (default "/root/.docker")
  -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context set with "docker
                           context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level ("debug"|"info"|"warn"|"error"|"fatal") (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default "/root/.docker/ca.pem")
      --tlscert string     Path to TLS certificate file (default "/root/.docker/cert.pem")
      --tlskey string      Path to TLS key file (default "/root/.docker/key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Management Commands:
--------------------
  builder     Manage builds
  config      Manage Docker configs
  container   Manage containers
  context     Manage contexts
  image       Manage images
  manifest    Manage Docker image manifests and manifest lists
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Commands:
---------
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes

Run 'docker COMMAND --help' for more information on a command.

















